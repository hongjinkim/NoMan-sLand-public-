//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/InputAction/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""0135264c-09c0-40da-98a2-7fb79d4a2bd8"",
            ""actions"": [
                {
                    ""name"": ""TouchPosition0"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b2e1d15b-7e60-4173-b7bf-c104793fe541"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""06ee74ad-f696-40fa-b615-59af1a09b73f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPress0"",
                    ""type"": ""Button"",
                    ""id"": ""dfc27165-16a5-447d-b62b-29a50b9f82d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPress1"",
                    ""type"": ""Button"",
                    ""id"": ""a66df53f-b8f0-40aa-b18c-5033ec9bf3c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f9c77843-5894-46fa-b6df-bc91e5d8652f"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29191ac5-2705-47a2-8cca-42261f12ba63"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPress0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7728efc9-9600-4b6e-8b71-40a51bf4e371"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9688d649-2b3a-4665-9bb9-72050a15a0da"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPress1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_TouchPosition0 = m_Touch.FindAction("TouchPosition0", throwIfNotFound: true);
        m_Touch_TouchPosition1 = m_Touch.FindAction("TouchPosition1", throwIfNotFound: true);
        m_Touch_TouchPress0 = m_Touch.FindAction("TouchPress0", throwIfNotFound: true);
        m_Touch_TouchPress1 = m_Touch.FindAction("TouchPress1", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
    private readonly InputAction m_Touch_TouchPosition0;
    private readonly InputAction m_Touch_TouchPosition1;
    private readonly InputAction m_Touch_TouchPress0;
    private readonly InputAction m_Touch_TouchPress1;
    public struct TouchActions
    {
        private @PlayerInput m_Wrapper;
        public TouchActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPosition0 => m_Wrapper.m_Touch_TouchPosition0;
        public InputAction @TouchPosition1 => m_Wrapper.m_Touch_TouchPosition1;
        public InputAction @TouchPress0 => m_Wrapper.m_Touch_TouchPress0;
        public InputAction @TouchPress1 => m_Wrapper.m_Touch_TouchPress1;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void AddCallbacks(ITouchActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
            @TouchPosition0.started += instance.OnTouchPosition0;
            @TouchPosition0.performed += instance.OnTouchPosition0;
            @TouchPosition0.canceled += instance.OnTouchPosition0;
            @TouchPosition1.started += instance.OnTouchPosition1;
            @TouchPosition1.performed += instance.OnTouchPosition1;
            @TouchPosition1.canceled += instance.OnTouchPosition1;
            @TouchPress0.started += instance.OnTouchPress0;
            @TouchPress0.performed += instance.OnTouchPress0;
            @TouchPress0.canceled += instance.OnTouchPress0;
            @TouchPress1.started += instance.OnTouchPress1;
            @TouchPress1.performed += instance.OnTouchPress1;
            @TouchPress1.canceled += instance.OnTouchPress1;
        }

        private void UnregisterCallbacks(ITouchActions instance)
        {
            @TouchPosition0.started -= instance.OnTouchPosition0;
            @TouchPosition0.performed -= instance.OnTouchPosition0;
            @TouchPosition0.canceled -= instance.OnTouchPosition0;
            @TouchPosition1.started -= instance.OnTouchPosition1;
            @TouchPosition1.performed -= instance.OnTouchPosition1;
            @TouchPosition1.canceled -= instance.OnTouchPosition1;
            @TouchPress0.started -= instance.OnTouchPress0;
            @TouchPress0.performed -= instance.OnTouchPress0;
            @TouchPress0.canceled -= instance.OnTouchPress0;
            @TouchPress1.started -= instance.OnTouchPress1;
            @TouchPress1.performed -= instance.OnTouchPress1;
            @TouchPress1.canceled -= instance.OnTouchPress1;
        }

        public void RemoveCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface ITouchActions
    {
        void OnTouchPosition0(InputAction.CallbackContext context);
        void OnTouchPosition1(InputAction.CallbackContext context);
        void OnTouchPress0(InputAction.CallbackContext context);
        void OnTouchPress1(InputAction.CallbackContext context);
    }
}
